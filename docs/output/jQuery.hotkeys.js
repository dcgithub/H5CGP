Ext.data.JsonP.jQuery_hotkeys({"tagname":"class","name":"jQuery.hotkeys","autodetected":{},"files":[{"filename":"jquery.hotkeys.js","href":"jquery.hotkeys.html#jQuery-hotkeys"}],"members":[{"name":"areKeysDown","tagname":"method","owner":"jQuery.hotkeys","id":"method-areKeysDown","meta":{}},{"name":"lastKeyPressed","tagname":"method","owner":"jQuery.hotkeys","id":"method-lastKeyPressed","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-jQuery.hotkeys","short_doc":"Provides easy, human-friendly handling for keyboard input. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/jquery.hotkeys.html#jQuery-hotkeys' target='_blank'>jquery.hotkeys.js</a></div></pre><div class='doc-contents'><p>Provides easy, human-friendly handling for keyboard input.</p>\n\n<p>USAGE:</p>\n\n<ul>\n<li><p>Bind the <code>keydown</code>, <code>keypress</code>, or <code>keyup</code> events to an element:</p>\n\n<pre><code>$(selector).keypress('ctrl+a down', function(event) {});\n// OR\n$(selector).on('keypress', 'ctrl+a down', function(event) {});\n</code></pre>\n\n<p>Separate key combinations that should trigger the callback with spaces.\nIn the examples above, the callback would fire if <code>ctrl+a</code> or <code>down</code> was\npressed. In the event callback, <code>event.keyPressed</code> holds the combination\nthat actually triggered the callback.</p></li>\n<li><p>You can specify keys in combination with the control keys: <code>alt</code>,\n<code>ctrl</code>, <code>meta</code>, and <code>shift</code>. If you use multiple control keys in a\ncombination, specify them in alphabetical order.</p></li>\n<li><p>Instead of binding to key events, you can also just call\n<code><a href=\"#!/api/jQuery.hotkeys-method-areKeysDown\" rel=\"jQuery.hotkeys-method-areKeysDown\" class=\"docClass\">jQuery.hotkeys.areKeysDown</a>()</code> to determine whether a set of keys is\ncurrently being pressed, or examine the list of currently pressed keys\nyourself in <code>jQuery.hotkeys.keysDown</code>. This is useful if you want to\nbind to key events for all keys since <code>event.keyPressed</code> does not exist\nin this scenario:</p>\n\n<pre><code>$(selector).keypress(function(event) {});\n</code></pre></li>\n<li><p>If you only care about keys that were pressed (and released) instead of\nwhich keys are being held down, you can call\n<code><a href=\"#!/api/jQuery.hotkeys-method-lastKeyPressed\" rel=\"jQuery.hotkeys-method-lastKeyPressed\" class=\"docClass\">jQuery.hotkeys.lastKeyPressed</a>()</code> or examine the last 5 keys pressed in\n<code>jQuery.hotkeys.lastKeysPressed</code>.</p></li>\n</ul>\n\n\n<p>Hotkeys aren't tracked if you're inside of an input element (unless you\nexplicitly bind the hotkey directly to the input). This helps avoid\nconflicts with normal user typing.</p>\n\n<p>NOTE: Firefox is the only major browser that will reliably let you override\nall key shortcuts built into the browser. This won't be a problem for most\napplications, but you should avoid binding to combinations like ctrl+Q and\nalt+F4 because most browsers will still react to those by closing the\nwindow.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-areKeysDown' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jQuery.hotkeys'>jQuery.hotkeys</span><br/><a href='source/jquery.hotkeys.html#jQuery-hotkeys-method-areKeysDown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jQuery.hotkeys-method-areKeysDown' class='name expandable'>areKeysDown</a>( <span class='pre'>keyArray</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a set of keys is currently pressed down. ...</div><div class='long'><p>Tests whether a set of keys is currently pressed down.</p>\n\n<p>If no control key (alt, ctrl, meta, shift) is currently held down,\nthe specified keys will match in any order. Otherwise, they have to\nmatch in the given order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keyArray</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/String<div class='sub-desc'><p>An Array or string of keys to check. If an Array is passed, this\n  method tests whether <em>all</em> the keys in the array are currently held\n  down <em>and</em> whether any keys are held down that are not in the array.\n  If a String is passed, combinations of characters should be connected\n  with + signs and separated with spaces. Each combination will be\n  checked and this function will return true if any of the combinations\n  matches. For example, the string \"up down left+right\" will return true\n  if either the up arrow key, the down arrow key, or both the left and\n  right arrow keys are currently pressed.</p>\n\n<p>  NOTE: Instead of writing shift-key characters like \"@\", write\n  \"shift+2\". This avoids ambiguity and makes it less likely that\n  invalid character sequences could be specified.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the given keys match the set of keys currently pressed\n  down; false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-lastKeyPressed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jQuery.hotkeys'>jQuery.hotkeys</span><br/><a href='source/jquery.hotkeys.html#jQuery-hotkeys-method-lastKeyPressed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jQuery.hotkeys-method-lastKeyPressed' class='name expandable'>lastKeyPressed</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the last key pressed. ...</div><div class='long'><p>Return the last key pressed.</p>\n</div></div></div></div></div></div></div>","meta":{}});