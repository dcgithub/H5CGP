Ext.data.JsonP.Timer({"tagname":"class","name":"Timer","autodetected":{},"files":[{"filename":"core.js","href":"core.html#Timer"}],"params":[{"tagname":"params","type":"Boolean","name":"autoStart","default":"true","optional":true,"doc":"<p>Whether to start the timer immediately upon instantiation or wait until\n  the <a href=\"#!/api/Timer-method-start\" rel=\"Timer-method-start\" class=\"docClass\">Timer.start</a>() method is called.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"whileAnimating","default":"false","optional":true,"doc":"<p>Indicates whether the amount of time measured should be the time elapsed\n  only while animation was running (true) or the total time elapsed (false).</p>\n","html_type":"Boolean"}],"members":[{"name":"getDelta","tagname":"method","owner":"Timer","id":"method-getDelta","meta":{}},{"name":"getElapsedTime","tagname":"method","owner":"Timer","id":"method-getElapsedTime","meta":{}},{"name":"start","tagname":"method","owner":"Timer","id":"method-start","meta":{}},{"name":"stop","tagname":"method","owner":"Timer","id":"method-stop","meta":{}},{"name":"event","tagname":"method","owner":"Timer","id":"static-method-event","meta":{"static":true}},{"name":"getTimeSince","tagname":"method","owner":"Timer","id":"static-method-getTimeSince","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Timer","short_doc":"A timer. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/core.html#Timer' target='_blank'>core.js</a></div></pre><div class='doc-contents'><p>A timer.</p>\n\n<p>Adapted from the\n<a href=\"https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js\">three.js clock</a>.</p>\n\n<p>If you only care about how long something takes (e.g. when testing\nperformance) and you don't need to stop the timer, <a href=\"#!/api/Timer-static-method-event\" rel=\"Timer-static-method-event\" class=\"docClass\">Timer.event</a>() and\n<a href=\"#!/api/Timer-static-method-getTimeSince\" rel=\"Timer-static-method-getTimeSince\" class=\"docClass\">Timer.getTimeSince</a>() are more efficient than instantiating a new Timer\nobject.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>autoStart</span> : Boolean (optional)<div class='sub-desc'><p>Whether to start the timer immediately upon instantiation or wait until\n  the <a href=\"#!/api/Timer-method-start\" rel=\"Timer-method-start\" class=\"docClass\">Timer.start</a>() method is called.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>whileAnimating</span> : Boolean (optional)<div class='sub-desc'><p>Indicates whether the amount of time measured should be the time elapsed\n  only while animation was running (true) or the total time elapsed (false).</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div><div class='members'><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-getDelta' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-method-getDelta' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-method-getDelta' class='name expandable'>getDelta</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the time elapsed in seconds since the last time a delta was measured. ...</div><div class='long'><p>Get the time elapsed in seconds since the last time a delta was measured.</p>\n\n<p>Deltas are taken when the timer starts or stops or elapsed time is\nmeasured.</p>\n\n<p>Note that if the timer is stopped and autoStart is on, calling this method\nwill start the timer again.</p>\n</div></div></div><div id='method-getElapsedTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-method-getElapsedTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-method-getElapsedTime' class='name expandable'>getElapsedTime</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the amount of time the timer has been running, in seconds. ...</div><div class='long'><p>Get the amount of time the timer has been running, in seconds.</p>\n</div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-method-start' class='name expandable'>start</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Start the timer. ...</div><div class='long'><p>Start the timer.</p>\n</div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-method-stop' class='name expandable'>stop</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stop the timer. ...</div><div class='long'><p>Stop the timer.</p>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-event' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-static-method-event' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-static-method-event' class='name expandable'>event</a>( <span class='pre'>[id], [whileAnimating]</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Register the time at which an event occurred. ...</div><div class='long'><p>Register the time at which an event occurred.</p>\n\n<p>If you only care about how long something takes (e.g. when testing\nperformance) and you don't need to stop the timer, <a href=\"#!/api/Timer-static-method-event\" rel=\"Timer-static-method-event\" class=\"docClass\">Timer.event</a>() and\n<a href=\"#!/api/Timer-static-method-getTimeSince\" rel=\"Timer-static-method-getTimeSince\" class=\"docClass\">Timer.getTimeSince</a>() are more efficient than instantiating a new Timer\nobject.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : String (optional)<div class='sub-desc'><p>An identifier for the event.</p>\n</div></li><li><span class='pre'>whileAnimating</span> : Boolean (optional)<div class='sub-desc'><p>Indicates whether the amount of time measured between when <a href=\"#!/api/Timer-static-method-event\" rel=\"Timer-static-method-event\" class=\"docClass\">Timer.event</a>()\n  is called and when <a href=\"#!/api/Timer-static-method-getTimeSince\" rel=\"Timer-static-method-getTimeSince\" class=\"docClass\">Timer.getTimeSince</a>() is called should be the time\n  elapsed only while animation was running (true) or the total time\n  elapsed (false).</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='static-method-getTimeSince' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Timer'>Timer</span><br/><a href='source/core.html#Timer-static-method-getTimeSince' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Timer-static-method-getTimeSince' class='name expandable'>getTimeSince</a>( <span class='pre'>[id]</span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Return the time since an event occurred. ...</div><div class='long'><p>Return the time since an event occurred.</p>\n\n<p>If you only care about how long something takes (e.g. when testing\nperformance) and you don't need to stop the timer, <a href=\"#!/api/Timer-static-method-event\" rel=\"Timer-static-method-event\" class=\"docClass\">Timer.event</a>() and\n<a href=\"#!/api/Timer-static-method-getTimeSince\" rel=\"Timer-static-method-getTimeSince\" class=\"docClass\">Timer.getTimeSince</a>() are more efficient than instantiating a new Timer\nobject.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : String (optional)<div class='sub-desc'><p>An identifier for the event.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>Seconds since the event, or 0 if the event is not found.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});